// Generated by CoffeeScript 1.3.3
(function() {

  Finch.route("/", {
    setup: function() {
      return console.log("root is setup");
    },
    load: function() {
      var html;
      console.log("root is loaded");
      html = "<section><div class='well'>\n  <h1>Hello Frank?</h1>\n</div></section>";
      return $('#content').html(html);
    },
    teardown: function() {
      return console.log("root has been torndown");
    }
  });

  Finch.route("/user/:id", {
    setup: function(bindings) {
      console.log("setup for user " + bindings.id);
      return App.setxClass("header-link", "li", "user", "active");
    },
    load: function(bindings) {
      var url;
      console.log("loading user");
      url = "/static/js/pymwyfa_stub.json";
      return App.getResource(url, {
        stub: true,
        stubtype: 'user_pages',
        stubid: bindings.id,
        loc: '#content',
        tmpl: "user-details.test"
      });
    },
    teardown: function() {
      return console.log("tearing down user");
    }
  });

  Finch.route("/user/:uid/race/:rid", {
    setup: function(bindings) {
      console.log("setup for user:race " + bindings.uid + ":" + bindings.rid);
      return App.setxClass("header-link", "li", "races", "active");
    },
    load: function(bindings) {
      var url;
      console.log("loading user:race");
      url = "/static/js/pymwyfa_stub.json";
      return App.getResource(url, {
        stub: true,
        stubtype: 'user_race_pages',
        stubid: "" + bindings.uid + ":" + bindings.rid,
        loc: '#content',
        tmpl: "user-race.test",
        postProcess: App.challenge.postProcess
      });
    },
    teardown: function() {
      return console.log("tearing down user:race");
    }
  });

  $(function() {
    var App;
    App = {
      cache: {},
      loadTemplate: function(name) {
        var template, url;
        url = "/static/views/" + name + ".handlebars";
        template = $.ajax({
          url: url,
          async: false
        }).responseText;
        return Handlebars.compile(template);
      },
      renderTemplate: function(name, data) {
        var self, tmpl;
        self = this;
        tmpl = self.loadTemplate(name);
        return tmpl(data || {});
      },
      getResource: function(url, options) {
        return $.getJSON(url, function(data) {
          var html;
          if (options.stub) {
            data = data[options.stubtype][options.stubid];
          }
          html = App.renderTemplate(options.tmpl, data);
          $(options.loc).html(html);
          if (options.postProcess) {
            return options.postProcess(data);
          }
        });
      },
      setxClass: function(dataname, type, key, value) {
        var needle, old, things;
        things = "data-" + dataname;
        old = $("" + type + "[" + things + "][class=" + value + "]");
        needle = $("" + type + "[" + things + "=" + key + "]");
        old.removeClass(value);
        return needle.addClass(value);
      },
      challenge: {
        postProcess: function(data) {
          var c, _i, _len, _ref, _results;
          _ref = data.challenges;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            _results.push(App.challenge.slider(parseInt(data.goal), c));
          }
          return _results;
        },
        slider: function(goal, info) {
          return $("#slider-" + info.from).slider({
            value: goal,
            min: goal - (7 * info.unit),
            max: goal + (1 * info.unit),
            step: info.unit,
            slide: function(event, ui) {
              var newamt;
              $("span[data-challenge-time='" + info.from + "']").html(App.utility.secToStr(ui.value));
              if (ui.value < goal) {
                newamt = info.flat + info.bonus + (goal - ui.value) * info.scale / info.unit;
              } else {
                newamt = info.flat;
              }
              return $("span[data-challenge-amt='" + info.from + "']").html(newamt.toFixed(2));
            }
          });
        }
      },
      utility: {
        secToStr: function(seconds) {
          var hourStr, hours, minStr, mins, rem, secStr, secs;
          hours = Math.floor(seconds / 3600);
          rem = seconds % 3600;
          mins = Math.floor(rem / 60);
          secs = rem % 60;
          hourStr = hours > 0 ? "" + hours + "h" : "";
          minStr = mins < 10 ? "0" + mins + "m" : "" + mins + "m";
          secStr = secs < 10 ? "0" + secs : "" + secs;
          return "" + hourStr + minStr + secStr + "s";
        }
      }
    };
    return window.App = App;
  });

}).call(this);
