// Generated by CoffeeScript 1.3.3
(function() {
  var App;

  Finch.route("/", {
    setup: function() {
      return console.log("root is setup");
    },
    load: function() {
      var html;
      console.log("root is loaded");
      html = "<section><div class='well'>\n  <h1>Hello Frank?</h1>\n</div></section>";
      return $('#content').html(html);
    },
    teardown: function() {
      return console.log("root has been torndown");
    }
  });

  Finch.route("/user/:id", {
    setup: function(bindings) {
      return console.log("setup for user " + bindings.id);
    },
    load: function(bindings) {
      var url;
      console.log("loading user");
      url = "/static/js/pymwyfa_stub.json";
      return $.getJSON(url, function(stub) {
        var html, userData;
        userData = stub.user_pages[bindings.id];
        html = App.renderTemplate("user-details.test", userData);
        return $('#content').html(html);
      });
    },
    teardown: function() {
      return console.log("tearing down user");
    }
  });

  Finch.route("/user/:uid/race/:rid", {
    setup: function(bindings) {
      return console.log("setup for user:race " + bindings.uid + ":" + bindings.rid);
    },
    load: function(bindings) {
      var url;
      console.log("loading user:race");
      url = "/static/js/pymwyfa_stub.json";
      return $.getJSON(url, function(stub) {
        var html, theData;
        theData = stub.user_race_pages["" + bindings.uid + ":" + bindings.rid];
        html = App.renderTemplate("user-race.test", theData);
        return $('#content').html(html);
      });
    },
    teardown: function() {
      return console.log("tearing down user:race");
    }
  });

  App = {
    cache: {},
    loadTemplate: function(name) {
      var template, url;
      url = "/static/views/" + name + ".handlebars";
      template = $.ajax({
        url: url,
        async: false
      }).responseText;
      return Handlebars.compile(template);
    },
    renderTemplate: function(name, data) {
      var self, tmpl;
      self = this;
      tmpl = self.loadTemplate(name);
      return tmpl(data || {});
    }
  };

}).call(this);
